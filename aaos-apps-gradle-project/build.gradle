/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    gradle.ext.aaosLatestSDK = 34

    gradle.ext.repoRootPath = rootDir.parentFile.parentFile.parentFile.parentFile.parent
    gradle.ext.lib_car_system_stubs = gradle.ext.repoRootPath + "/prebuilts/sdk/" + gradle.ext.aaosLatestSDK + "/system/android.car-system-stubs.jar"
    gradle.ext.lib_system_stubs = gradle.ext.repoRootPath + "/prebuilts/sdk/" + gradle.ext.aaosLatestSDK + "/system/android.jar"
    gradle.ext.unbundledCertPath = gradle.ext.repoRootPath + "/packages/apps/Car/libs/certs/com_android_car_apps_test.jks"
    gradle.ext.aaosCertPath = gradle.ext.unbundledCertPath // DEPRECATED, use unbundledCertPath
    gradle.ext.chassisCertPath = gradle.ext.repoRootPath + "/vendor/auto/embedded/prebuilts/car-ui-lib/chassis_upload_key.jks"

    gradle.ext.platformGoogleCertPath = gradle.ext.repoRootPath + "/vendor/google/certs/devkeys/platform.keystore"
    gradle.ext.platformAospCertPath = gradle.ext.repoRootPath + "/packages/apps/Car/libs/certs/platform.keystore"
    gradle.ext.platformCertPath = gradle.ext.platformGoogleCertPath // DEPRECATED, use google and aosp certs

    gradle.ext.platformSdkVersion = "34" // Change this to the most recent android API level.

    // If the checkout includes Soong bash and `PLATFORM_SDK_VERSION` is set then use that instead.
    gradle.ext.soongBash = gradle.ext.repoRootPath + "/build/soong/soong_ui.bash"
    if (file(gradle.ext.soongBash).exists()) {
        // Note: This will only return a value if a target was set with `lunch`
        def engPlatSdkVersion = (gradle.ext.soongBash + " --dumpvar-mode PLATFORM_SDK_VERSION").execute().text.trim()
        if (!engPlatSdkVersion.isBlank()) {
            gradle.ext.platformSdkVersion = engPlatSdkVersion
        }
    }

    gradle.ext.getVersionCode = { ->
        def code = project.hasProperty('versionCode') ? versionCode.toInteger() : gradle.ext.platformSdkVersion.toInteger()
        println "VersionCode is set to $code"
        return code
    }

    gradle.ext.getVersionName = { ->
        def name = project.hasProperty('versionName') ? versionName : gradle.ext.platformSdkVersion
        println "VersionName is set to $name"
        return name
    }
}

plugins {
    alias(libs.plugins.protobuf) apply false
    id("aaosApps.buildLogic") apply false
}

allprojects {
    tasks.withType(JavaCompile) {
        // Compile with prebuilt android.jar.
        options.compilerArgs.add('-Xbootclasspath/p:' + gradle.ext.lib_system_stubs)
        // TODO: just pass -Xlint, to enable all the supported types of warnings.
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    // Re-exports for Kotlin build scripts
    ext.aaosLatestSDK = gradle.ext.aaosLatestSDK
    ext.lib_car_system_stubs = gradle.ext.lib_car_system_stubs
}
