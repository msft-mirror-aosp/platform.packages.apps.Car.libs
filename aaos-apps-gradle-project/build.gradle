/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinGradlePluginVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    gradle.ext.aaosLatestSDK = 33
    gradle.ext.aaosTargetSDK = 33

    gradle.ext.repoRootPath = rootDir.parentFile.parentFile.parentFile.parentFile.parent
    gradle.ext.lib_car_system_stubs = gradle.ext.repoRootPath + "/prebuilts/sdk/" + gradle.ext.aaosLatestSDK + "/system/android.car-system-stubs.jar"
    gradle.ext.lib_system_stubs = gradle.ext.repoRootPath + "/prebuilts/sdk/" + gradle.ext.aaosLatestSDK + "/system/android.jar"
    gradle.ext.aaosCertPath = gradle.ext.repoRootPath + "/packages/apps/Car/libs/certs/com_android_car_apps_test.jks"
    gradle.ext.chassisCertPath = gradle.ext.repoRootPath + "/vendor/auto/embedded/prebuilts/car-ui-lib/chassis_upload_key.jks"
    def googleCertPath = gradle.ext.repoRootPath + "/vendor/google/certs/devkeys/platform.keystore"
    if (file(googleCertPath).exists()) {
        gradle.ext.platformCertPath = googleCertPath
    } else {
        gradle.ext.platformCertPath = gradle.ext.repoRootPath + "/packages/apps/Car/libs/certs/platform.keystore"
    }
    gradle.ext.soongBash = gradle.ext.repoRootPath + "/build/soong/soong_ui.bash"
    gradle.ext.platformSdkVersion = "33" // Change this to the most recent android API level.
    if (file(gradle.ext.soongBash).exists()) {
        gradle.ext.platformSdkVersion = (gradle.ext.soongBash + " --dumpvar-mode PLATFORM_SDK_VERSION").execute().text.trim()
    }

    gradle.ext.getVersionCode = { ->
        def code = project.hasProperty('versionCode') ? versionCode.toInteger() : gradle.ext.platformSdkVersion.toInteger()
        println "VersionCode is set to $code"
        return code
    }

    gradle.ext.getVersionName = { ->
        def name = project.hasProperty('versionName') ? versionName : gradle.ext.platformSdkVersion
        println "VersionName is set to $name"
        return name
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        // Compile with prebuilt android.jar.
        options.compilerArgs.add('-Xbootclasspath/p:' + gradle.ext.lib_system_stubs)
        // TODO: just pass -Xlint, to enable all the supported types of warnings.
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    // Send all the build files to the out folder under the root of the repo init.
    // Gradle creates that folder if it doesn't exist.
    // Keep in sync with ./copy_gradle_output.sh
    ext.buildOutputPath = gradle.ext.repoRootPath + "/out/aaos-apps-gradle-build/"
    buildDir = new File(project.parent == null ? ext.buildOutputPath :
            project.parent.buildDir.path + "/" + project.name)
}
